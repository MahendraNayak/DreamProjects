import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.springVersion = '4.2.4.RELEASE'
    ext.springSecurity = '4.0.4.RELEASE'
    ext.springWSVersion = '2.2.4.RELEASE'
    ext.servletJstlVersion = '1.2'
    ext.servletApiVersion = '3.0.1'
    ext.servletJspVersion = '2.1'
    ext.dataBindVersion = '2.2.3'
    ext.hbVersion = '4.3.10.Final'
    ext.hbValidatorVersion = '5.1.3.Final'
    ext.comLangVersion = '3:3.3.2'
    ext.slf4jVersion = '1.7.20'
    ext.pgsqlVersion = '9.4.1209.jre7'
    ext.javassistVersion = '3.18.0-GA'
    ext.hbToolVersion = '4.3.1.CR1'

    def userProps = "gradle.properties"
    ext.uProps = new Properties()
    println "Reading properties from $userProps"
    file("$userProps").withInputStream {
        uProps.load(it);
    }
    println "Printing all user properties --------"
    uProps.each { prop ->
        println "User Property key: " + prop.key + " value: " + prop.value
    }
    buildDir = 'dist/build'
}

apply plugin: 'java'
apply plugin: 'war'

def tomcatHome = uProps.get('tomcat.home')

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

configurations {
// Hibernate TOOL Configuration is added for the generate schema file for the database
    hibernatetool {
        description = " This configuration will only used when hibernate tool is used"
        extendsFrom compile
        transitive = true
    }
}

dependencies {
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.apache.commons:commons-lang$comLangVersion"
    compile "org.springframework.security:spring-security-web:$springSecurity"
    compile "org.springframework.security:spring-security-config:$springSecurity"

    compile "javax.servlet:jstl:$servletJstlVersion"
    providedCompile("javax.servlet:javax.servlet-api:$servletApiVersion")
    providedCompile("javax.servlet.jsp:jsp-api:$servletJspVersion")

    //dependency for data conversion.
    compile group: 'org.json', name: 'json', version: '20090211'
    compile "com.fasterxml.jackson.core:jackson-databind:$dataBindVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$dataBindVersion"


    // org slf4j dependnecy
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    // Persistence
    compile "org.postgresql:postgresql:$pgsqlVersion"
    compile "org.hibernate:hibernate-core:$hbVersion"
    compile "org.hibernate:hibernate-entitymanager:$hbVersion"
    compile "org.hibernate:hibernate-validator:$hbValidatorVersion"
    compile "org.hibernate:hibernate-c3p0:$hbVersion"
    compile "org.javassist:javassist:$javassistVersion"

    // Hibernate tools to generate the SQL files for the database
    hibernatetool "org.hibernate:hibernate-tools:$hbToolVersion"
}

processResources {
    // Filter is going to replace the below token values for Hibernate Tools inside hibernate.cfg.xml file
    // Also in other XML files
    filter(ReplaceTokens, tokens: uProps)
}

def entitySqlFile = new File(project.buildDir, "sql/litrumProjects-resetDB.sql")
def createSqlFile = new File(project.buildDir, "sql/litrumProjects-ddl.sql")

task generateSql(dependsOn: [classes, processResources]) << {
    description = "Generate the complete sql file"
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibernatetool.asPath
    )
    entitySqlFile.parentFile.mkdirs()
    ant.hibernatetool(destdir: entitySqlFile.parentFile) {
        annotationconfiguration(configurationfile: "$buildDir/resources/main/hibernate.cfg.xml")
        hbm2ddl(export: false, drop: true, create: true, outputfilename: entitySqlFile.name, format: true)
        hbm2ddl(export: false, drop: false, create: true, outputfilename: createSqlFile.name, format: true)
        classpath { pathelement(path: sourceSets.main.output.asPath) }
    }
}

war {
    manifest {
        attributes 'Implementation-Title': 'Litrum WebServer component',
                'Implementation-Version': "$version",
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
    webInf {
        from 'src/main/webContent/WEB-INF'
    }
    from('src/main/webContent') { include('*/*') }
}.archiveName("LitrumWebServer.war")

task deployToLocalTomcat(dependsOn: [war]) {
    description = "Task helps to deploy the server app to Local Tomcat"
    doFirst() {
        println "deleting LitrumWebServer folder from $tomcatHome/webapps"
        delete("$tomcatHome/webapps/LitrumWebServer/")
    }
    doLast() {
        println "Unwarring $buildDir/libs/LitrumWebServer.war"
        ant.unwar(src: "$buildDir/libs/LitrumWebServer.war", dest: "$tomcatHome/webapps/LitrumWebServer")
        println "done"
    }
}